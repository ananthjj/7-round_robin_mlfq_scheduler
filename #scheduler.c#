#include "runtime.h"
#include <getopt.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void scheduler_fifo()
{
    int num_jobs = get_num_jobs();
    int arrival = get_current_time();

    float total_turnaround = 0.0f, total_response = 0.0f;
    for (int i = 0; i < num_jobs; i++) {
        int firstrun = get_current_time();
        printf("job %d started at %d\n", i, firstrun);
        total_response += firstrun - arrival;

        int r;
        while ((r = schedule_job(i, 9)) >= 0)
            printf("job %d run for %d at %d\n", i, r, get_current_time());

        int completion = get_current_time();
        printf("job %d finished at %d\n", i, completion);

        total_turnaround += completion - arrival;
    }

    printf("Average turnaround time was %f\n", total_turnaround / num_jobs);
    printf("Average response time was %f\n", total_response / num_jobs);
}

void scheduler_rr()
{
  int timeout = 4;
  int num_jobs = get_num_jobs();
  int arrival = get_current_time();
  //int i, NOP, sum=0,count=0, y, quant, wt=0, tat=0, at[10], bt[10], temp[10];  
  float total_turnaround = 0.0f, total_response = 0.0f;

  
  for(int i = 0; i < num_jobs; i++){
    //jobs[i].index ++;
    //jobs[i].part ++;
    int firstrun = get_current_time();
    printf("job %d started at %d\n", i, firstrun);
    total_response += firstrun - arrival;

    for (work = 0; work < timeout; work++) {
        if (jobs[i].step >= jobs[i].parts[jobs[i].index]) {
            jobs[i].step = 0;
            jobs[i].index += 1;
        } else
            jobs[i].step += 1;
	if (jobs[i].num_parts >= 
    }

    int r;
        while ((r = schedule_job(i, 4)) >= 0)
            printf("job %d run for %d at %d\n", i, r, get_current_time());

        int completion = get_current_time();
        printf("job %d finished at %d\n", i, completion);

        total_turnaround += completion - arrival;
  }


  
  for(sum=0, i = 0; y!=0; )  
    {  
      if(temp[i] <= quant && temp[i] > 0) // define the conditions   
	{  
	  sum = sum + temp[i];  
	  temp[i] = 0;  
	  count=1;  
	}     
      else if(temp[i] > 0)  
	{  
	  temp[i] = temp[i] - quant;  
	  sum = sum + quant;    
	}  
      if(temp[i]==0 && count==1)  
	{  
	  y--; //decrement the process no.  
	  printf("\nProcess No[%d] \t\t %d\t\t\t\t %d\t\t\t %d", i+1, bt[i], sum-at[i], sum-at[i]-bt[i]);  
	  wt = wt+sum-at[i]-bt[i];  
	  tat = tat+sum-at[i];  
	  count =0;     
	}  
      if(i==NOP-1)  
	{  
	  i=0;  
	}  
      else if(at[i+1]<=sum)  
	{  
	  i++;  
	}  
      else  
	{  
	  i=0;  
	}  
    }  
  // represents the average waiting time and Turn Around time  
  avg_wt = wt * 1.0/NOP;  
  avg_tat = tat * 1.0/NOP;  
  printf("\n Average Turn Around Time: \t%f", avg_wt);  
  printf("\n Average Waiting Time: \t%f", avg_tat);  
  getch();  
}  
  
  int wt[n], tat[n];
  float total_turnaround = 0.0f, total_response = 0.0f;
  int num_jobs = get_num_jobs();
  for (int i = 0; i < num_jobs; i++){
    total_response += wt[i]
    total_turnaround += tat[i]
}

void scheduler_mlfq()
{
  
}

void help()
{
    printf("Usage: scheduler [-s seed] [-n jobs] fifo|rr|mlfq\n");
    exit(1);
}

int main(int argc, char* argv[])
{
    int seed = 4;
    int jobs = 2;

    char c;
    while ((c = getopt(argc, argv, "s:n:h")) != -1) {
        switch (c) {
        case 's':
            seed = atoi(optarg);
            break;

        case 'n':
            jobs = atoi(optarg);
            break;

        default:
            help();
        }
    }

    init_simulation(seed, jobs);

    if (argv[optind] == NULL || strcmp(argv[optind], "fifo") == 0)
        scheduler_fifo();
    else if (strcmp(argv[optind], "rr") == 0)
        scheduler_rr();
    else if (strcmp(argv[optind], "mlfq") == 0)
        scheduler_mlfq();
    else
        help();

    return 0;
}
